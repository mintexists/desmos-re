import { xhrFetch } from "./utils.js"

let txt = xhrFetch('./shared.js');

txt = txt.replaceAll(/\bOT\b/g, "actionMergeFreeVariableError")
txt = txt.replaceAll(/\bZd\b/g, "addArgumentsToDefinitionError")
txt = txt.replaceAll(/\bFx\b/g, "addTypeErrorError")
txt = txt.replaceAll(/\bTy\b/g, "adjacentMixedNumberError")
txt = txt.replaceAll(/\beI\b/g, "adjacentNumbersError")
txt = txt.replaceAll(/\bXx\b/g, "andTypeErrorError")
txt = txt.replaceAll(/\bEP\b/g, "ansUndefinedError")
txt = txt.replaceAll(/\btf\b/g, "assignmentsUnsupportedError")
txt = txt.replaceAll(/\bca\b/g, "badEqualitySliceError")
txt = txt.replaceAll(/\bOP\b/g, "badForInputListDependencyError")
txt = txt.replaceAll(/\bNP\b/g, "badForIntervalDependencyError")
txt = txt.replaceAll(/\bxy\b/g, "badImplicitCallError")
txt = txt.replaceAll(/\bxP\b/g, "badIntegralBoundDependencyError")
txt = txt.replaceAll(/\bhI\b/g, "badLogExponentError")
txt = txt.replaceAll(/\blP\b/g, "badProductBoundDependencyError")
txt = txt.replaceAll(/\bIP\b/g, "badSampleSizeError")
txt = txt.replaceAll(/\bcP\b/g, "badSumBoundDependencyError")
txt = txt.replaceAll(/\bKd\b/g, "badSymbolContextError")
txt = txt.replaceAll(/\bgI\b/g, "badTrigExponentError")
txt = txt.replaceAll(/\bKT\b/g, "badTupleDimensionsError")
txt = txt.replaceAll(/\bOx\b/g, "baseCaseCannotDependOnRecursiveParameterError")
txt = txt.replaceAll(/\bwd\b/g, "baseCaseTooComplicatedUsePiecewiseError")
txt = txt.replaceAll(/\bLd\b/g, "baseCasesMustAllHaveSameReturnTypeError")
// txt = txt.replaceAll(/\b$d\b/g, "binaryOperatorMissingOperandError")
txt = txt.replaceAll(/\bXd\b/g, "blankExpressionError")
txt = txt.replaceAll(/\bkT\b/g, "boxplotBreadthInvalidError")
txt = txt.replaceAll(/\bGT\b/g, "boxplotOffsetInvalidError")
txt = txt.replaceAll(/\bHI\b/g, "cannotAssignColorError")
txt = txt.replaceAll(/\bZl\b/g, "cannotRedefineError")
txt = txt.replaceAll(/\bkI\b/g, "cannotRestrictError")
txt = txt.replaceAll(/\bzI\b/g, "cannotRestrictWithEqualityError")
txt = txt.replaceAll(/\bEI\b/g, "cannotSubscriptError")
txt = txt.replaceAll(/\bOy\b/g, "cantCombineSphericalAndCylindricalError")
txt = txt.replaceAll(/\bFI\b/g, "cdfMaxInvalidError")
txt = txt.replaceAll(/\bVI\b/g, "cdfMaxLessThanMinError")
txt = txt.replaceAll(/\bwI\b/g, "cdfMinInvalidError")
txt = txt.replaceAll(/\bzT\b/g, "cdfRequiresArgumentsError")
txt = txt.replaceAll(/\bUT\b/g, "cdfTooManyArgumentsError")
txt = txt.replaceAll(/\bWV\b/g, "clickableObjectAlreadyAssignedError")
txt = txt.replaceAll(/\bZV\b/g, "clickableObjectAssignmentNotDefinedError")
txt = txt.replaceAll(/\bjV\b/g, "clickableObjectAssignmentNotIdentifierError")
txt = txt.replaceAll(/\bJV\b/g, "clickableObjectInvalidExpressionError")
txt = txt.replaceAll(/\bTI\b/g, "colonMissingConditionError")
txt = txt.replaceAll(/\bXT\b/g, "colorArityError")
txt = txt.replaceAll(/\byy\b/g, "combineTypeErrorError")
txt = txt.replaceAll(/\bYx\b/g, "comparatorTypeErrorError")
txt = txt.replaceAll(/\bzV\b/g, "complexPlottedTableCellError")
txt = txt.replaceAll(/\bLy\b/g, "complicatedDoubleInequalityError")
txt = txt.replaceAll(/\bWI\b/g, "complicatedPolarImplicitError")
txt = txt.replaceAll(/\bUP\b/g, "computedColumnHeaderError")
txt = txt.replaceAll(/\b_c\b/g, "constantUnsupportedError")
txt = txt.replaceAll(/\bjx\b/g, "coordinateAccessTypeErrorError")
txt = txt.replaceAll(/\bCP\b/g, "customRegressionsUnsupportedError")
txt = txt.replaceAll(/\bMI\b/g, "cycleError")
txt = txt.replaceAll(/\b_T\b/g, "deeplyNestedError")
txt = txt.replaceAll(/\bGP\b/g, "dependsOnDeletedGeoObjectError")
txt = txt.replaceAll(/\bhP\b/g, "derivativeMissingBodyError")
txt = txt.replaceAll(/\bdT\b/g, "derivativeTypeErrorError")
txt = txt.replaceAll(/\bfT\b/g, "derivativeTypeErrorRespectError")
txt = txt.replaceAll(/\bmT\b/g, "derivativeVariableTypeErrorError")
txt = txt.replaceAll(/\bfP\b/g, "differentialWithSuperscriptError")
txt = txt.replaceAll(/\bVy\b/g, "distributionAsFunctionError")
txt = txt.replaceAll(/\bHx\b/g, "divideTypeErrorError")
txt = txt.replaceAll(/\b_I\b/g, "domainMaxInvalidError")
txt = txt.replaceAll(/\bLI\b/g, "domainMaxLessThanMinError")
txt = txt.replaceAll(/\bAI\b/g, "domainMinInvalidError")
txt = txt.replaceAll(/\bly\b/g, "dotLHSConstantNumberErrorError")
txt = txt.replaceAll(/\btT\b/g, "dotLHSTypeErrorError")
txt = txt.replaceAll(/\bnT\b/g, "dotRHSPropertyErrorError")
txt = txt.replaceAll(/\bII\b/g, "duplicateFunctionParameterError")
txt = txt.replaceAll(/\bCT\b/g, "duplicateUpdateRulesError")
txt = txt.replaceAll(/\bay\b/g, "eachBaseCaseArgumentMustBeSimpleError")
txt = txt.replaceAll(/\bYd\b/g, "emptyParenError")
txt = txt.replaceAll(/\byI\b/g, "emptyPipeError")
txt = txt.replaceAll(/\bdI\b/g, "emptyRadicalError")
txt = txt.replaceAll(/\bfI\b/g, "emptyRadicalIndexError")
txt = txt.replaceAll(/\bmI\b/g, "emptySquareBracketError")
txt = txt.replaceAll(/\bEy\b/g, "emptySubscriptError")
txt = txt.replaceAll(/\baI\b/g, "emptySuperscriptError")
txt = txt.replaceAll(/\bwy\b/g, "equationRequiredError")
txt = txt.replaceAll(/\bUa\b/g, "equationsUnsupportedError")
txt = txt.replaceAll(/\bkd\b/g, "eventHandlerTypeErrorError")
txt = txt.replaceAll(/\bLx\b/g, "expectedArgumentToBeButFoundError")
txt = txt.replaceAll(/\bzx\b/g, "exponentTypeErrorError")
txt = txt.replaceAll(/\brf\b/g, "featureUnavailableError")
txt = txt.replaceAll(/\boI\b/g, "fractionEmptyError")
txt = txt.replaceAll(/\biI\b/g, "fractionMissingDenominatorError")
txt = txt.replaceAll(/\bsI\b/g, "fractionMissingNumeratorError")
txt = txt.replaceAll(/\bUy\b/g, "fractionsUnavailableError")
txt = txt.replaceAll(/\bnf\b/g, "functionDefinitionsUnsupportedError")
// txt = txt.replaceAll(/\bPI\b/g, "functionNameAsParameterError")
txt = txt.replaceAll(/\bDy\b/g, "functionNotDefinedError")
txt = txt.replaceAll(/\bVD\b/g, "functionOnlyWorksInComplexModeError")
txt = txt.replaceAll(/\b_x\b/g, "functionRequiresNumberOfArgumentsError")
txt = txt.replaceAll(/\bHs\b/g, "functionTypeErrorError")
txt = txt.replaceAll(/\bLi\b/g, "functionUnsupportedError")
txt = txt.replaceAll(/\bKx\b/g, "geometryLengthTypeErrorError")
txt = txt.replaceAll(/\bGV\b/g, "getLogInternalErrorsError")
txt = txt.replaceAll(/\bBT\b/g, "gpuLongProductError")
txt = txt.replaceAll(/\bVT\b/g, "gpuLongSumError")
txt = txt.replaceAll(/\bOc\b/g, "gpuMaxListSizeError")
txt = txt.replaceAll(/\bXl\b/g, "gpuUnsupportedFunctionError")
txt = txt.replaceAll(/\bFT\b/g, "gpuUnsupportedIntegralError")
txt = txt.replaceAll(/\bmu\b/g, "gpuVariableListLengthError")
txt = txt.replaceAll(/\bhy\b/g, "gpuVariableProductError")
txt = txt.replaceAll(/\bgy\b/g, "gpuVariableSumError")
txt = txt.replaceAll(/\bHd\b/g, "heterogeneousListError")
txt = txt.replaceAll(/\bIy\b/g, "identifierAsFunctionError")
txt = txt.replaceAll(/\bPy\b/g, "identifierIsNotFunctionError")
txt = txt.replaceAll(/\bQd\b/g, "illegalBinWidthError")
txt = txt.replaceAll(/\bGd\b/g, "illegalDotCallError")
txt = txt.replaceAll(/\bZI\b/g, "implicitsDisabledError")
txt = txt.replaceAll(/\buP\b/g, "incorrectProductLowerBoundError")
txt = txt.replaceAll(/\baP\b/g, "incorrectSumLowerBoundError")
txt = txt.replaceAll(/\bBd\b/g, "indexTypeErrorError")
txt = txt.replaceAll(/\bRy\b/g, "inequalitiesDisabledError")
txt = txt.replaceAll(/\bLc\b/g, "inequalitiesUnsupportedError")
txt = txt.replaceAll(/\bpT\b/g, "integralArgumentTypeErrorError")
txt = txt.replaceAll(/\bcT\b/g, "integralLowerBoundTypeErrorError")
txt = txt.replaceAll(/\bgP\b/g, "integralMissingBodyError")
txt = txt.replaceAll(/\bpP\b/g, "integralMissingBoundError")
txt = txt.replaceAll(/\bdP\b/g, "integralMissingDifferentialError")
txt = txt.replaceAll(/\blT\b/g, "integralUpperBoundTypeErrorError")
txt = txt.replaceAll(/\bU\b/g, "internalError")
txt = txt.replaceAll(/\bUV\b/g, "invalidDependentFirstTableColumnError")
txt = txt.replaceAll(/\bJI\b/g, "invalidDoubleEquality3dError")
txt = txt.replaceAll(/\bjI\b/g, "invalidDoubleInequality3dError")
txt = txt.replaceAll(/\bAy\b/g, "invalidDoubleInequalityVariablesError")
txt = txt.replaceAll(/\beP\b/g, "invalidFirstTableColumnError")
txt = txt.replaceAll(/\bzy\b/g, "invalidFunctionNameError")
txt = txt.replaceAll(/\bsP\b/g, "invalidHalfEmptyRangeError")
txt = txt.replaceAll(/\bAc\b/g, "invalidImplicitVariablesError")
txt = txt.replaceAll(/\bYI\b/g, "invalidImplicitVariables3dError")
// txt = txt.replaceAll(/\b$I\b/g, "invalidInequalityVariablesError")
txt = txt.replaceAll(/\bHP\b/g, "invalidIntervalComprehensionArityError")
txt = txt.replaceAll(/\bJl\b/g, "invalidIntervalComprehensionParameterError")
txt = txt.replaceAll(/\bkP\b/g, "invalidIntervalComprehensionReturnTypeError")
txt = txt.replaceAll(/\bUI\b/g, "invalidLHSError")
txt = txt.replaceAll(/\bzP\b/g, "invalidNestedIntervalComprehensionError")
txt = txt.replaceAll(/\bcI\b/g, "invalidOperatorNameError")
txt = txt.replaceAll(/\btP\b/g, "invalidRegressionParameterError")
txt = txt.replaceAll(/\buI\b/g, "invalidSubscriptError")
txt = txt.replaceAll(/\bWd\b/g, "invalidTableEntryError")
txt = txt.replaceAll(/\bKI\b/g, "invalidTableHeaderError")
txt = txt.replaceAll(/\bvP\b/g, "listComprehensionIncorrectInputError")
txt = txt.replaceAll(/\bSP\b/g, "listComprehensionInputListTypeErrorError")
txt = txt.replaceAll(/\bvc\b/g, "listTypeErrorError")
txt = txt.replaceAll(/\bAT\b/g, "logScaleBoxPlotError")
txt = txt.replaceAll(/\bRT\b/g, "logScaleDotPlotError")
txt = txt.replaceAll(/\bNT\b/g, "logScaleHistogramError")
txt = txt.replaceAll(/\bYl\b/g, "logScaleTypeErrorError")
txt = txt.replaceAll(/\bMP\b/g, "logbaseUnsupportedError")
txt = txt.replaceAll(/\bQT\b/g, "malformedListError")
txt = txt.replaceAll(/\bJT\b/g, "malformedPointError")
txt = txt.replaceAll(/\bKV\b/g, "matrixAddDimensionsError")
txt = txt.replaceAll(/\bQV\b/g, "matrixAssignmentError")
txt = txt.replaceAll(/\bsB\b/g, "matrixElementTypeErrorError")
txt = txt.replaceAll(/\bnB\b/g, "matrixFractionalPowerError")
txt = txt.replaceAll(/\biB\b/g, "matrixInvalidVariableError")
txt = txt.replaceAll(/\btB\b/g, "matrixMultiplyDimensionsError")
txt = txt.replaceAll(/\brB\b/g, "matrixPowerDimensionsError")
txt = txt.replaceAll(/\beB\b/g, "matrixSubtractDimensionsError")
txt = txt.replaceAll(/\bzd\b/g, "maxListSizeError")
txt = txt.replaceAll(/\bso\b/g, "methodRequiresListError")
txt = txt.replaceAll(/\bbP\b/g, "mismatchedBracesError")
txt = txt.replaceAll(/\b_y\b/g, "mismatchedDoubleInequalityError")
txt = txt.replaceAll(/\bqx\b/g, "mixedComparatorChainError")
txt = txt.replaceAll(/\bwT\b/g, "mixedRestrictionEquationError")
txt = txt.replaceAll(/\bLT\b/g, "multipleEqualityRestrictionsError")
txt = txt.replaceAll(/\bWl\b/g, "multiplyDefinedError")
txt = txt.replaceAll(/\bVd\b/g, "multiplyTypeErrorError")
txt = txt.replaceAll(/\bGx\b/g, "multiplyTypeError2DError")
txt = txt.replaceAll(/\bkx\b/g, "multiplyTypeError3DError")
txt = txt.replaceAll(/\bBx\b/g, "multiplyTypeErrorCrossError")
txt = txt.replaceAll(/\bUx\b/g, "negativeTypeErrorError")
txt = txt.replaceAll(/\bJd\b/g, "nonArithmeticRangeError")
txt = txt.replaceAll(/\bjd\b/g, "nonListDoubleReducerError")
txt = txt.replaceAll(/\brP\b/g, "nonListParameterizedReducerError")
txt = txt.replaceAll(/\bqV\b/g, "nonSquareDeterminantError")
txt = txt.replaceAll(/\bYV\b/g, "nonSquareInverseError")
// txt = txt.replaceAll(/\b$V\b/g, "nonSquareTraceError")
txt = txt.replaceAll(/\bFd\b/g, "opaqueError")
txt = txt.replaceAll(/\bnP\b/g, "optimizationErrorError")
txt = txt.replaceAll(/\bZx\b/g, "orTypeErrorError")
txt = txt.replaceAll(/\bSy\b/g, "parameterAlreadyDefinedError")
txt = txt.replaceAll(/\bDP\b/g, "parenthesesUnavailableError")
txt = txt.replaceAll(/\bHT\b/g, "pdfWrongArityError")
txt = txt.replaceAll(/\bTP\b/g, "percentMissingOfError")
txt = txt.replaceAll(/\bgT\b/g, "piecewiseBranchTypeErrorError")
txt = txt.replaceAll(/\bfy\b/g, "piecewiseConditionTypeErrorError")
txt = txt.replaceAll(/\bbI\b/g, "piecewiseMissingConditionError")
txt = txt.replaceAll(/\bxI\b/g, "piecewisePartMissingConditionError")
txt = txt.replaceAll(/\bWx\b/g, "pointTypeErrorError")
txt = txt.replaceAll(/\bFc\b/g, "pointsUnsupportedError")
txt = txt.replaceAll(/\bUd\b/g, "polygonTwoNumbersErrorError")
txt = txt.replaceAll(/\bky\b/g, "polygonUnsupportedIn3dError")
txt = txt.replaceAll(/\byT\b/g, "primeVariableTypeErrorError")
txt = txt.replaceAll(/\bCy\b/g, "primeWithoutParenError")
txt = txt.replaceAll(/\bNc\b/g, "primedFunctionArityError")
txt = txt.replaceAll(/\buT\b/g, "productArgumentTypeErrorError")
txt = txt.replaceAll(/\bdy\b/g, "productInfiniteBoundErrorError")
txt = txt.replaceAll(/\boT\b/g, "productLowerBoundTypeErrorError")
txt = txt.replaceAll(/\byP\b/g, "productMissingBodyError")
txt = txt.replaceAll(/\boP\b/g, "productMissingBoundError")
txt = txt.replaceAll(/\baT\b/g, "productUpperBoundTypeErrorError")
// txt = txt.replaceAll(/\b$T\b/g, "randomArityError")
txt = txt.replaceAll(/\bYT\b/g, "randomFromBroadcastDistributionError")
txt = txt.replaceAll(/\bNx\b/g, "recursionCyclicDependencyError")
txt = txt.replaceAll(/\bRx\b/g, "recursionDoesNotTerminateError")
txt = txt.replaceAll(/\bxT\b/g, "recursionInRegressionError")
txt = txt.replaceAll(/\bAx\b/g, "recursiveDepthExceededError")
txt = txt.replaceAll(/\bvx\b/g, "recursiveFunctionCannotDependOnFreeVariableError")
txt = txt.replaceAll(/\boy\b/g, "recursiveFunctionMissingBaseCaseError")
txt = txt.replaceAll(/\bSx\b/g, "recursiveFunctionMissingBaseCaseWithMetadataError")
txt = txt.replaceAll(/\bPT\b/g, "regressionTypeErrorError")
txt = txt.replaceAll(/\bwc\b/g, "regressionsUnsupportedError")
txt = txt.replaceAll(/\bCI\b/g, "selfReferentialBaseCaseError")
txt = txt.replaceAll(/\bRc\b/g, "selfReferentialFunctionsError")
txt = txt.replaceAll(/\bDx\b/g, "setLogInternalErrorsError")
txt = txt.replaceAll(/\bvy\b/g, "shadowedIndexError")
txt = txt.replaceAll(/\bBy\b/g, "shadowedIntegrationVariableError")
txt = txt.replaceAll(/\bqy\b/g, "shadowedListComprehensionInputError")
txt = txt.replaceAll(/\bXI\b/g, "singleVariableImplicitEquationsDisabledError")
txt = txt.replaceAll(/\bXV\b/g, "singularInverseError")
txt = txt.replaceAll(/\bSI\b/g, "sliderLimitReferencesExportError")
txt = txt.replaceAll(/\bOI\b/g, "sliderMaxInvalidError")
txt = txt.replaceAll(/\bNI\b/g, "sliderMaxLessThanMinError")
txt = txt.replaceAll(/\bvI\b/g, "sliderMinInvalidError")
txt = txt.replaceAll(/\bRI\b/g, "sliderStepInvalidError")
txt = txt.replaceAll(/\byu\b/g, "substitutionAmbiguousCommaError")
txt = txt.replaceAll(/\baB\b/g, "substitutionBodyActionError")
txt = txt.replaceAll(/\bFP\b/g, "substitutionBodyDependsOnRegressionError")
txt = txt.replaceAll(/\bVP\b/g, "substitutionDuplicateSymbolError")
txt = txt.replaceAll(/\buf\b/g, "substitutionFunctionLHSError")
txt = txt.replaceAll(/\baf\b/g, "substitutionIllegalLHSError")
// txt = txt.replaceAll(/\bof\b/g, "substitutionInvalidAssignmentsError")
txt = txt.replaceAll(/\bwP\b/g, "substitutionLocalLHSError")
// txt = txt.replaceAll(/\b$y\b/g, "substitutionNestedError")
txt = txt.replaceAll(/\bBP\b/g, "substitutionRecursiveCallLHSError")
txt = txt.replaceAll(/\boB\b/g, "substitutionTypeErrorError")
txt = txt.replaceAll(/\bYy\b/g, "substitutionUnsupportedIntervalError")
txt = txt.replaceAll(/\bVx\b/g, "subtractTypeErrorError")
txt = txt.replaceAll(/\biT\b/g, "sumArgumentTypeErrorError")
txt = txt.replaceAll(/\bpy\b/g, "sumInfiniteBoundErrorError")
txt = txt.replaceAll(/\brT\b/g, "sumLowerBoundTypeErrorError")
txt = txt.replaceAll(/\bmP\b/g, "sumMissingBodyError")
txt = txt.replaceAll(/\biP\b/g, "sumMissingBoundError")
txt = txt.replaceAll(/\bsT\b/g, "sumUpperBoundTypeErrorError")
txt = txt.replaceAll(/\bpI\b/g, "superscriptWithPrimeError")
txt = txt.replaceAll(/\bbT\b/g, "tableEntryTypeErrorError")
txt = txt.replaceAll(/\bhT\b/g, "tableHeaderTypeErrorError")
txt = txt.replaceAll(/\bIT\b/g, "tableRegressionInvalidDataError")
txt = txt.replaceAll(/\bHV\b/g, "tableRegressionLogWithNegativeError")
txt = txt.replaceAll(/\bTT\b/g, "tableRegressionTypeErrorError")
txt = txt.replaceAll(/\bqT\b/g, "tdistWrongArityError")
txt = txt.replaceAll(/\beT\b/g, "threeDLengthTypeErrorError")
txt = txt.replaceAll(/\bDI\b/g, "tickerMinStepNonNegativeNumberError")
txt = txt.replaceAll(/\btI\b/g, "tokenWithSubscriptError")
txt = txt.replaceAll(/\bby\b/g, "tooManyArgumentsError")
txt = txt.replaceAll(/\brn\b/g, "tooManyVariablesError")
txt = txt.replaceAll(/\bJx\b/g, "transformationDefinitionTypeErrorError")
txt = txt.replaceAll(/\bQx\b/g, "transformationTypeErrorError")
txt = txt.replaceAll(/\bjl\b/g, "ttestListTooShortError")
txt = txt.replaceAll(/\bnI\b/g, "unaryOperatorMissingLeftError")
txt = txt.replaceAll(/\brI\b/g, "unaryOperatorMissingRightError")
txt = txt.replaceAll(/\bwx\b/g, "unexpectedEqualityError")
txt = txt.replaceAll(/\bcy\b/g, "unexpectedInequalityError")
txt = txt.replaceAll(/\bMy\b/g, "unexpectedPrimeError")
txt = txt.replaceAll(/\blI\b/g, "unexpectedSubscriptError")
txt = txt.replaceAll(/\bks\b/g, "unexpectedSymbolError")
txt = txt.replaceAll(/\bqP\b/g, "unexportableTableRegressionError")
txt = txt.replaceAll(/\bQI\b/g, "unplottableEqualityChainError")
// txt = txt.replaceAll(/\b$x\b/g, "unplottableLongInequalityChainError")
txt = txt.replaceAll(/\bqI\b/g, "unplottablePolarFunctionError")
txt = txt.replaceAll(/\buy\b/g, "unrecognizedSymbolError")
txt = txt.replaceAll(/\bvT\b/g, "updateRuleFunctionLHSError")
txt = txt.replaceAll(/\bST\b/g, "updateRuleIllegalLHSError")
txt = txt.replaceAll(/\bmy\b/g, "updateRuleLocalLHSError")
txt = txt.replaceAll(/\bMT\b/g, "updateRuleNonIdentifierLHSError")
txt = txt.replaceAll(/\bET\b/g, "updateRuleTypeErrorError")
txt = txt.replaceAll(/\bDT\b/g, "updateRuleUndefinedLHSError")
txt = txt.replaceAll(/\bGI\b/g, "useRForCylindricalCoordinatesError")
txt = txt.replaceAll(/\bBI\b/g, "useRhoForSphericalCoordinatesError")
txt = txt.replaceAll(/\bFy\b/g, "variableAsFunctionError")
txt = txt.replaceAll(/\bsf\b/g, "variableLengthDistributionListError")
txt = txt.replaceAll(/\bLP\b/g, "variableLengthIntegralDependsOnIntegrationVariableError")
txt = txt.replaceAll(/\b_P\b/g, "variableLengthProductBodyDependsOnIndexError")
txt = txt.replaceAll(/\bAP\b/g, "variableLengthSumBodyDependsOnIndexError")
txt = txt.replaceAll(/\bRP\b/g, "variableLengthTopLevelListError")
txt = txt.replaceAll(/\bPP\b/g, "variableSeedError")
txt = txt.replaceAll(/\bHy\b/g, "variableUnsupportedError")
txt = txt.replaceAll(/\bef\b/g, "variablesUnsupportedError")
txt = txt.replaceAll(/\bNy\b/g, "warnComplexImplicitError")
txt = txt.replaceAll(/\bGy\b/g, "writeIntegralError")
txt = txt.replaceAll(/\bAo\b/g, "wrongArityError")
txt = txt.replaceAll(/\bZT\b/g, "wrongArityLengthAsCountError")
txt = txt.replaceAll(/\bqd\b/g, "wrongDoubleReducerArityError")
txt = txt.replaceAll(/\bWT\b/g, "wrongParameterizedReducerArityError")
txt = txt.replaceAll(/\bjT\b/g, "zeroArgReducerError")

console.log(txt)
